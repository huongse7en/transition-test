{"version":3,"sources":["App.js","serviceWorker.js","index.js","icons8-checkmark.svg"],"names":["queryString","require","Content","props","transitionStatus","className","src","logo","App","useState","setTransitionStatus","useEffect","params","parse","window","location","search","Object","keys","length","payment_status","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"qOAGMA,G,MAAcC,EAAQ,KAE5B,SAASC,EAAQC,GACf,OAAOA,EAAMC,kBACX,IAAK,IACH,OACE,oCACA,uBAAGC,UAAU,QAAb,qDACA,0GAGJ,IAAK,IACH,OACE,oCACA,uBAAGA,UAAU,QAAb,0FACA,0GAGJ,IAAK,IACH,OACE,oCACA,uBAAGA,UAAU,QAAb,qDACA,0GAGJ,IAAK,IACH,OACE,oCACA,uBAAGA,UAAU,QAAb,uCACA,0GAGJ,IAAK,IACL,QACE,OACE,oCACA,yBAAKA,UAAU,YACf,yBAAKC,IAAKC,OAEV,uBAAGF,UAAU,QAAb,qCACA,0FACA,2GAiDOG,MAxBf,SAAaL,GAAQ,IAAD,EAC8BM,oBAAS,GADvC,mBACXL,EADW,KACOM,EADP,KAUlB,OARAC,qBAAU,WACR,IAAIC,EAASZ,EAAYa,MAAMC,OAAOC,SAASC,QAC5CC,OAAOC,KAAKN,GAAQO,OAAS,GAAKP,EAAOQ,eAC1CV,EAAoBE,EAAOQ,gBAE3BV,EAAoB,SAItB,yBAAKL,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKA,UAAU,eACf,kBAACH,EAAD,CAASE,iBAAkBA,IAC3B,uBAAGC,UAAU,YAAb,wBCxEYgB,QACW,cAA7BP,OAAOC,SAASO,UAEe,UAA7BR,OAAOC,SAASO,UAEhBR,OAAOC,SAASO,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,kBEzI5BC,EAAOC,QAAU,IAA0B,8C","file":"static/js/main.70b68a37.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport logo from './icons8-checkmark.svg';\nimport './App.css';\nconst queryString = require('query-string')\n\nfunction Content(props) {\n  switch(props.transitionStatus) {\n    case '0':\n      return (\n        <>\n        <p className=\"bold\"> Giao dịch đang chờ xử lý </p>\n        <p>Mọi thắc mắc xin liên hệ 18008098(miễn phí)</p>\n        </>\n      )\n    case '3':\n      return (\n        <>\n        <p className=\"bold\"> Giao dịch đã xử lý nhưng chưa có kết quả </p>\n        <p>Mọi thắc mắc xin liên hệ 18008098(miễn phí)</p>\n        </>\n      )\n    case '5':\n      return (\n        <>\n        <p className=\"bold\"> Khách hàng hủy không thanh toán</p>\n        <p>Mọi thắc mắc xin liên hệ 18008098(miễn phí)</p>\n        </>\n      )\n    case '2':\n      return (\n        <>\n        <p className=\"bold\"> Giao dịch thất bại </p>\n        <p>Mọi thắc mắc xin liên hệ 18008098(miễn phí)</p>\n        </>\n      )\n    case '1':\n    default:\n      return (\n        <>\n        <div className=\"App-logo\">\n        <img src={logo}/>\n        </div>\n        <p className=\"bold\"> Giao dịch thành công </p>\n        <p> Quý khách đã thanh toán thành công </p>\n        <p>Mọi thắc mắc xin liên hệ 18008098(miễn phí)</p>\n        </>\n      )\n\n  }\n  // if(props.transitionStatus) {\n  //   return (\n  //     <>\n  //     <div className=\"App-logo\">\n  //     <img src={logo}/>\n  //     </div>\n  //     <p className=\"bold\"> Giao dịch thành công </p>\n  //     <p> Quý khách đã thanh toán thành công </p>\n  //     <p>Mọi thắc mắc xin liên hệ 18008098(miễn phí)</p>\n  //     </>\n  //   )\n  // } else {\n  //   return (\n  //     <>\n  //     <p className=\"bold\"> Giao dịch thất bại </p>\n  //     <p>Mọi thắc mắc xin liên hệ 18008098(miễn phí)</p>\n  //     </>\n  //   )\n  // }\n}\nfunction App(props) {\n  const [transitionStatus, setTransitionStatus] = useState(true);\n  useEffect(() => {\n    let params = queryString.parse(window.location.search);\n    if(Object.keys(params).length > 0 && params.payment_status) {\n      setTransitionStatus(params.payment_status)\n    } else {\n      setTransitionStatus(null)\n    }\n  })\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div className=\"App-content\">\n        <Content transitionStatus={transitionStatus}></Content>\n        <a className=\"App-link\">\n          Kết thúc\n        </a>\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/icons8-checkmark.64f755c3.svg\";"],"sourceRoot":""}